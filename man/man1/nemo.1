.TH NEMO 1NEMO "26 December 2020"
.SH NAME
nemo, astronemo \- outline the NEMO package
.SH DESCRIPTION
\fBnemo\fP is a computer package, there is no program with that name. On linux
there is also the \fInemo\fP file manager, which is a fork of \fInautilus\fP.
.PP
\fBastronemo\fP is the name you may find in some package managers. If you google the name
\fInemo\fP, you will find a lot of computer related tools with that name.
.PP
\fBNEMO\fP is a \fIStellar Dynamics Toolbox\fP for users and
programmers. It has various
programs to create, integrate and analyze N-body systems. In addition
there are various tools to operate on images, tables and orbits,
including FITS files to export/import to/from other astronomical
data reduction packages.
.PP
A good start is the manual page \fIprograms(8NEMO)\fP, which lists
programs thematically, and \fIindex(1NEMO)\fP, which lists them 
alphabetically (CAVEAT: these pages are not well maintained).

.SH NEMO vs. UNIX

\fBNEMO\fP is very much integrated into the Unix(tm) operating system,
so users are expected to use standard Unix commands as glue
between the various tasks (cat, ls, rm, cp, awk, sm, \fIetc.\fP).
Understanding of shell scripting (sh, csh, python, perl, \fIetc.\fP) can be
very useful. for NEMO as well.
Several example shell scripts exist in the source tree
to demonstrate how experiments can be orchestrated. We use
mostly csh, bash and python. Yes, csh too, even though csh is considered
harmful now.
.PP
Here are some useful reminders of using NEMO when you are familiar
with the unix style of command line tools, piping etc.:

.nf

- programs use a set of key=value command line arguments, minimum match works, but you cannot repeat keywords
    = the --help or help=h are ways to get inline help from a program and remind you of the keyword names
    = keyword values can be math expressions (see \fInemoinp(1NEMO)\fP)
    = the UNIX \fIman(1)\fP command will get offline help

- NEMO can use pipes efficiently:
    = The UNIX stdin and stdout are represented with a dash (-), so piping can become a little awkward
    = The UNIX /dev/null is represented with a dot (.), like a black hole sucking up everything
.fi

.SH SYNOPSIS
.nf
\fBprogram --help\fP
\fBprogram\fP [key1=]val1 [key2=]val2 .\!.\!.
\fBrunprogram\fP [key1=]val1 [key2=]val2 .\!.\!.
\fBrun program\fP ...
.fi

.SH GETTING STARTED
What you need to do to set yourself up for \fBNEMO\fP:
.PP
The easiest way is to add the appropriate line to your \fI.cshrc\fP or
\fI.bashrc\fP file. For example
.nf

        \fBsource /opt/nemo/nemo_start.sh\fP
	
or for the die hards

        \fBsource /opt/nemo/nemo_start.csh\fP
.fi
.PP
If you need more control over your NEMO environment, there are other methods
described elsewhere (The \fINEMO Users/Programmers Guide\fP, Appendix A),
or consult one of your local friendly NEMO users.
.SH HOW TO RUN NEMO PROGRAMS
NEMO programs can be run just as any other command in Unix, in that sense
NEMO is nothing more than an extension of Unix. NEMO programs usually
read and/or write files, though these files can in most circumstances
be replaced with a dash to designate a unix pipe, e.g.
.nf

     mkplummer - 10 | snapprint -
.fi
.PP
NEMO programs all work by using a series of \fIkeyword=value\fP pairs
on the commandline.
If the order of the supplied keywords is the same as the
program expects them, the \fIkeyword=\fP part can be omitted, simply to save
some keystrokes.  There is a consistent ordering of keywords in most programs
that allows experienced users to use such (and other) shortcuts. Python uses
the same principle with the un-named arguments.
(e.g. \fBin=\fP the first one, \fBout=\fP the second one etc.). Keywords
can be used in minimum match, but this is not recommended for shell
scripts. To make shell scripts robust, it is recommended you add the \fIkeyword=\fP
part for all but the first one or two.
.PP
NEMO programs make a distinction between
\fBprogram\fP keywords (keywords unique to a program) and \fBsystem\fP 
keywords (a
fixed set of keywords that each NEMO program understands).  The system
keywords that you are likely to
use are \fI help=\fP and \fIyapp=\fP, and to a lesser degree 
\fIdebug=\fP and \fIerror=\fP.  The \fIhelp=\fP gives various types of 
inline aid from a program. There is also online help on a 
program, for which unix \fIman(1)\fP command (or any of it's derived friends)
is normally used. The \fIyapp=\fP sets the graphics device used by
programs who use a graphics device. Your \fInemo_start\fP
environment may have given you a default. \fBYAPP=/xs\fP is a common default
if the yapp_pgplot interface is used.
.PP
Each \fBsystem\fP keyword can be defaulted by setting it's equivalent
environment variable (in upper case!). Program keywords can be
abbreviated to uniqueness.
.PP
Examples: Consider the program \fImkplummer\fP, a program which creates
an N-body realization of a Plummer sphere.
To get online help, one types (we included three legacy program options,
--man, --help, --version):
.nf
        \fIman mkplummer\fP
        \fPmkplummer --man\fP
.fi
and to get various types of inline help:
.nf
        \fImkplummer --help\fP
        \fImkplummer -h\fP		
        \fImkplummer help=\fP
        \fImkplummer help=h\fP
        \fImkplummer help='?'\fP
.fi
and to get the version:
.nf
        \fImkplummer help=V\fP
        \fImkplummer --version\fP
.fi
Note the literal quotes around the question-mark needed if you use
a regular Unix shell as interface.
The first \fIhelp=\fP reminds you of the order of the
program keywords and their default values. The second form, \fIhelp=h\fP
prints out a small one-line reminder what each keyword means. The last
form \fIhelp='?'\fP lists various options the user interface understands,
this one is not program dependant.
.PP
If you chain NEMO programs, pipes can be a very efficient way to stream
data and/or prevent large amounts of disk access. Most keywords that operate 
on files (notably \fBin=\fP, \fBout=\fP, as long as
\fIstropen(3NEMO)\fP is used) can use standard piped I/O by using
the dash (\fB-\fP) to name the keyword, e.g.
.nf
    mkplummer - 10 | snapprint -
.fi
would create a snapshot of 10 bodies on the fly, and print
positions and velocities to the user using \fBsnapprint\fP.
The alternative would have been
.nf
    mkplummer out=tmp nbody=10
    snapprint in=tmp
    rm tmp
.fi
.SH HOW TO RUN non-NEMO PROGRAMS
Over the times NEMO has incoorporated a number of non-NEMO programs,
with varying degrees of input parameter schemes. Some via
parameter files, some interactive input, some a command line interface
alien to NEMO. For a number of
them a unified NEMO frontend was developed, usually those programs start
with the prefix \fBrun\fP. For example, \fBbulgerot\fP comes with
\fBrunbulgerot\fP. Since often such programs have a hardcoded name
for input and/or output files, one simple way to be able to run 
them in parallel without stepping on filenames, is the use of
a clean run directory.  Example of this can be found
in 
\fIrunbulgerot(1NEMO)\fP,
\fIrunbody1(1NEMO)\fP,
\fIrungalaxy(1NEMO)\fP,
\fIrunscfm(1NEMO)\fP,
\fIrunqumond(1NEMO)\fP,
and some others.
.PP
You will find a few common user keywords for this:
\fBoutdir=\fP is always a required keyword, and needs to
be a non-existing directory in which the data is written.
For some programs there is an \fBexe=\fP keyword, in order to
change the name of the non-NEMO program to be run. This is always
assumed to be in the standard Unix search path ($PATH).
.PP
Although these run* programs use a fairly common method to run
the non-NEMO programs, they have not all been unified
as is proposed in \fIrun(3NEMO)\fP.
.SH PROGRAMMING
You may need to do some sherlocking here.
You have probably seen the configure.ac and makedefs file.
The $NEMOLIB/makedefs is the active file.  The \fImknemo(8NEMO)\fP
will help you (re)compile programs, though
\fIbake(8NEMO)\fP can do a better job in a local directory.
.SH SEE ALSO
index(1NEMO), programs(8NEMO), tricks(8NEMO), mkplummer(1NEMO), files(8NEMO),
nemoinp(1NEMO), stropen(3NEMO), getparam(3NEMO), run(1NEMO), run(3NEMO), mknemo(8NEMO),
pipestatus(l)
.SH AUTHOR
Peter Teuben
.SH FURTHER INFORMATION
The \fINEMO Users/Programmers Guide\fP contains most of
the information you need to get down to the guts of the system.
.PP
Various \fIman(1NEMO)\fP pages explain programs(1), subroutine libraries(3)
file formats(5) and system management(8).
.PP
NEMO homepage \fIhttp://www.astro.umd.edu/nemo\fP and github page \fIhttps://github.com/teuben/nemo\fP.
.SH BUGS
Since programs are being modified, and extended fairly regularly, 
manual pages for related programs do not always know about these
changes if they should. Keeping good cross references in the manual
pages might help. However, the \fBhelp=\fP description should always
be up to date, since it is derived from the code itself.
